//AUTHOR: Kayla Dixon
//COURSE: CPT 187
//PURPOSE: To learn how to sort and search arrays and write files.
//STARTDATE: 12/4/19

package edu.cpt187.dixon.participation;

import java.util.Random;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.Scanner;

public class Inventory 
{
	private final String[] DISCOUNT_NAMES = {"Member", "Senior", "No Discount"};
	private final double[] DISCOUNT_RATES = {0.25, 0.15, 0.0};
	private final String[] PRIZE_NAMES = {"PS4", "Xbox", "Wii"};
	private final int MAX_ITEMS = 5;
	private final int NOT_FOUND = -1;
	private final int RESET_VALUE = 0;
	private int[] itemIDs = new int[MAX_ITEMS];
	private String[] itemNames = new String[MAX_ITEMS];
	private double[] itemPrices = new double[MAX_ITEMS];
	private int[] orderQuantity = new int[MAX_ITEMS];
	private double[] orderTotal = new double[MAX_ITEMS];
	private int[] inStockCounts = new int[MAX_ITEMS];
	private int itemSearchIndex = 0;
	private int recordCount = 0;
	private Random prizeGenerator = new Random();
	
	public Inventory()
	{
		
	}//END OF INVENTORY CONSTRUCTOR
	
	public void setReduceStock(int borrowedHowMany)
	{
		itemSearchIndex = itemSearchIndex - borrowedHowMany;
	}//END OF SET REDUCE STOCK
	
	public void setLoadItems(String borrowedFileName)
	{
		recordCount = RESET_VALUE;
		
		try
		{
			Scanner infile = new Scanner(new FileInputStream(borrowedFileName));
			
			while (infile.hasNext() == true && recordCount < MAX_ITEMS)
			{
				itemIDs[recordCount] = infile.nextInt();
				itemNames[recordCount] = infile.next();
				itemPrices[recordCount] = infile.nextDouble();
				inStockCounts[recordCount] = infile.nextInt();
				recordCount++;
				
			}//END OF WHILE
			infile.close();
		}//END OF TRY
		catch (IOException ex)
		{
			recordCount = NOT_FOUND;
		}//END OF CATCH
		
	}//END OF SET LOAD ITEMS
	
	public void setLoadItems(String borrowedFileName, int borrowedSize)
	{
recordCount = RESET_VALUE;
		
		try
		{
			Scanner infile = new Scanner(new FileInputStream(borrowedFileName));
			
			while (infile.hasNext() == true && recordCount < MAX_ITEMS)
			{
				itemIDs[recordCount] = infile.nextInt();
				itemNames[recordCount] = infile.next();
				itemPrices[recordCount] = infile.nextDouble();
				orderQuantity[recordCount] = infile.nextInt();
				orderTotal[recordCount] = infile.nextDouble();
				inStockCounts[recordCount] = infile.nextInt();
				recordCount++;
				
			}//END OF WHILE
			infile.close();
		}//END OF TRY
		catch (IOException ex)
		{
			recordCount = NOT_FOUND;
		}//END OF CATCH
	}//END OF SET LOAD ITEMS OVERLOADED
	
	public void setSearchIndex(int borrowedID)
	{
		itemSearchIndex = borrowedID;
	}//END OF SET SEARCH INDEX
	
	public void setBubbleSort()
	{
		int last = 0;
		final int ZERO = 0;
		String swap = "";
		String False = "False";
		String True = "True";
		int index = 0;
		
		last = recordCount - 0;
		
		while(last > ZERO)
		{
			index = ZERO;
			swap = False;
			
			while(index < last)
			{
				if(itemIDs[index] > itemIDs[index + 1])
				{
					last = itemIDs[index];
					swap = True;
				}//END OF IF
				index++;
			}//END OF WHILE
			
			if(swap == False)
			{
				last = ZERO;
			}//END OF IF
			else
			{
				last = last - 1;
			}//END OF ELSE
		}//END OF WHILE
		
	}//END OF SET BUBBLE SORT
	
	public int[] getInStockCounts()
	{
		return inStockCounts;
	}//END OF GET IN STOCK COUNTS
	
	public int[] getItemIDs()
	{
		return itemIDs;
	}//END OF GET ITEM IDs
	
	public String[] getItemNames()
	{
		return itemNames;
	}//END OF GET ITEM NAMES
	
	public double[] getItemPrices()
	{
		return itemPrices;
	}//END OF GET ITEM PRICES
	
	public String[] getDiscountNames()
	{
		return DISCOUNT_NAMES;
	}//END OF GET DISCOUNT NAMES
	
	public double[] getDiscountRates()
	{
		return DISCOUNT_RATES;
	}//END OF GET DISCOUNT RATES
	
	public int[] getOrderQuantity()
	{
		return orderQuantity;
	}//END OF GET ORDER QUANTITY
	
	public double[] getOrderTotal()
	{
		return orderTotal;
	}//END OF GET ORDER TOTAL
	
	public String[] getPrizeNames()
	{
		return PRIZE_NAMES;
	}//END OF GET PRIZE NAMES

	public int getRandomNumber()
	{
		return prizeGenerator.nextInt(PRIZE_NAMES.length);
	}//END OF GET RANDOM NUMBER
	
	public int getSearchIndex()
	{
		return itemSearchIndex;
	}//END OF GET SEARCH INDEX
	
	public int getRecordCount()
	{
		return recordCount;
	}//END OF GET RECORD COUNT
	
	public int getSearchResults(int borrowedBorrowedID)
	{
		int first = 0;
		int last = 0;
		int mid = 0;
		String found = "";
		String False = "false";
		String True = "true";
		
		while(first <= last | found == False)
		{
			mid = (first + last)/2;
			if(itemIDs[mid] == borrowedBorrowedID)
			{
				found = True;
			}//END OF IF
			else
			{
				if(itemIDs[mid] < borrowedBorrowedID)
				{
					first = mid + 1;
				}//END OF IF
				else
				{
					last = mid - 1;
				}//END OF ELSE
			}//END OF ELSE
		}//END OF WHILE
		if(found == False)
			{
				mid = NOT_FOUND;
			}
			return mid;
		
	}//END OF GET SEARCH RESULTS
	

}//END OF CLASS
